---
import Layout from '../layouts/Layout.astro';
const base = import.meta.env.BASE_URL;
---

<Layout title="Living with the Ghost of Sam">
    <div class="password-container">
        <div class="password-form">
            <div class="form-header">
                <div class="logo-container">
                    <div class="ghost-icon">
                        <i class="fas fa-ghost"></i>
                    </div>
                    <div class="flying-sam" id="image-box">
                        <img src={`${base}images/SamImagesmall.jpg`} id="sam-image" alt="Flying Sam">
                    </div>
                    <h1>Living with the Ghost of Sam</h1>
                </div>
                <p class="password-instruction">Enter password to access content</p>
            </div>
            <div class="input-group">
                <input type="password" id="password-input" placeholder="Password">
                <button id="submit-password">
                    <i class="fas fa-arrow-right"></i>
                </button>
            </div>
            <div class="feedback-message" id="password-feedback"></div>
        </div>
    </div>

    <main id="content" class="hidden">
        <div class="glitch-container">
            <h1 class="glitch-text" data-text="Living with the Ghost of Sam">Living with the Ghost of Sam</h1>
        </div>
        
        <div class="tagline">
            <p>Where quantum consciousness meets comedy's legends</p>
        </div>
        
        <div class="grid">
            <a href={`${base}scripts`} class="card" data-tilt data-tilt-glare data-tilt-max-glare="0.3">
                <div class="card-content">
                    <div class="card-icon">
                        <i class="fas fa-file-pdf"></i>
                    </div>
                    <h2>Scripts</h2>
                    <p>Access all TV show scripts in PDF format</p>
                </div>
                <div class="card-overlay"></div>
            </a>
            
            <a href={`${base}documents`} class="card" data-tilt data-tilt-glare data-tilt-max-glare="0.3">
                <div class="card-content">
                    <div class="card-icon">
                        <i class="fas fa-folder-open"></i>
                    </div>
                    <h2>Show Documents</h2>
                    <p>Review evaluation materials and show proposals</p>
                </div>
                <div class="card-overlay"></div>
            </a>
            
            <a href={`${base}bible`} class="card" data-tilt data-tilt-glare data-tilt-max-glare="0.3">
                <div class="card-content">
                    <div class="card-icon">
                        <i class="fas fa-users"></i>
                    </div>
                    <h2>Character Bible</h2>
                    <p>Detailed character profiles and relationships</p>
                </div>
                <div class="card-overlay"></div>
            </a>
            
            <a href={`${base}sam`} class="card ghost-card" data-tilt data-tilt-glare data-tilt-max-glare="0.3">
                <div class="card-content">
                    <div class="card-icon pulse">
                        <i class="fas fa-ghost"></i>
                    </div>
                    <h2>Sam's Corner</h2>
                    <p>Watch exclusive clips featuring Sam</p>
                    <div class="badge">OH OH OHHHH!</div>
                </div>
                <div class="card-overlay"></div>
            </a>
            
            <a href={`${base}about`} class="card" data-tilt data-tilt-glare data-tilt-max-glare="0.3">
                <div class="card-content">
                    <div class="card-icon">
                        <i class="fas fa-user-edit"></i>
                    </div>
                    <h2>About the Writer</h2>
                    <p>Writer biography and background</p>
                </div>
                <div class="card-overlay"></div>
            </a>
        </div>
        
        <div class="footer-note">
            <p>"Comedy isn't just about making people laugh. It's about making them feel something real."</p>
        </div>
    </main>
</Layout>

<script>
    // Add Font Awesome
    const link = document.createElement('link');
    link.rel = 'stylesheet';
    link.href = 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css';
    document.head.appendChild(link);
    
    // Add vanilla-tilt.js
    const tiltScript = document.createElement('script');
    tiltScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/vanilla-tilt/1.7.2/vanilla-tilt.min.js';
    document.body.appendChild(tiltScript);
    
    // Password authentication
    document.addEventListener('DOMContentLoaded', function() {
        // Enhanced authentication check
        if (sessionStorage.getItem('authenticated')) {
            const passwordContainer = document.querySelector('.password-container');
            const contentElement = document.getElementById('content');
            if (passwordContainer && contentElement) {
                passwordContainer.style.display = 'none';
                contentElement.classList.remove('hidden');
                initializeTiltEffect();
            }
        }

        const passwordInput = document.getElementById('password-input');
        const submitButton = document.getElementById('submit-password');
        const feedbackElement = document.getElementById('password-feedback');
        const contentElement = document.getElementById('content');
        const passwordContainer = document.querySelector('.password-container');
        
        // Password validation
        function checkPassword() {
            const enteredPassword = passwordInput.value;
            
            if (enteredPassword === 'Terguson') {
                // Correct password
                feedbackElement.textContent = 'Access granted!';
                feedbackElement.classList.add('success');
                feedbackElement.classList.remove('error');
                
                // Save authentication state
                sessionStorage.setItem('authenticated', 'true');
                
                // Animate transition
                setTimeout(() => {
                    passwordContainer.style.opacity = '0';
                    setTimeout(() => {
                        passwordContainer.style.display = 'none';
                        contentElement.classList.remove('hidden');
                        initializeTiltEffect();
                    }, 500);
                }, 1000);
            } else {
                // Wrong password
                feedbackElement.textContent = 'Incorrect password. Try again.';
                feedbackElement.classList.add('error');
                feedbackElement.classList.remove('success');
                passwordInput.value = '';
                passwordInput.focus();
                
                // Shake effect
                passwordInput.classList.add('shake');
                setTimeout(() => {
                    passwordInput.classList.remove('shake');
                }, 500);
            }
        }
        
        // Event listeners for password submission
        if (submitButton) {
            submitButton.addEventListener('click', checkPassword);
        }
        
        if (passwordInput) {
            passwordInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    checkPassword();
                }
            });
        }
        
        // Sam image movement functionality
        const imageBox = document.getElementById('image-box');
        const samImage = document.getElementById('sam-image');
        
        if (imageBox && samImage) {
            function randomPosition() {
                const viewportWidth = Math.max(window.innerWidth, 320);
                const viewportHeight = Math.max(window.innerHeight, 240);
                
                const boxWidth = imageBox.offsetWidth;
                const boxHeight = imageBox.offsetHeight;
                
                const maxX = viewportWidth - boxWidth;
                const maxY = viewportHeight - boxHeight;
                
                const x = Math.max(0, Math.min(Math.floor(Math.random() * maxX), maxX));
                const y = Math.max(0, Math.min(Math.floor(Math.random() * maxY), maxY));
                
                return { x, y };
            }
            
            function moveImageBox() {
                const { x, y } = randomPosition();
                imageBox.style.transform = `translate3d(${x}px, ${y}px, 0)`;
                imageBox.style.webkitTransform = `translate3d(${x}px, ${y}px, 0)`;
            }
            
            // Initialize movement with requestAnimationFrame
            requestAnimationFrame(() => {
                moveImageBox();
                setInterval(moveImageBox, 3000);
            });
            
            // Handle window resizing
            window.addEventListener('resize', moveImageBox);
            
            // Image loading debug
            samImage.addEventListener('load', function() {
                console.log('Image loaded successfully');
                console.log('Image dimensions:', this.naturalWidth, 'x', this.naturalHeight);
            });
            
            samImage.addEventListener('error', function() {
                console.log('Failed to load image');
                console.log('Attempted image path:', this.src);
            });
        }
    });
    
    // Initialize tilt effect
    function initializeTiltEffect() {
        if (typeof VanillaTilt !== 'undefined') {
            VanillaTilt.init(document.querySelectorAll(".card"), {
                max: 15,
                speed: 300,
                glare: true,
                "max-glare": 0.3,
            });
        }
    }
</script>

<style>
    /* Password Screen Styles */
    .password-container {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(135deg, #121212 0%, #1e1e1e 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        transition: opacity 0.5s;
    }
    
    .password-form {
        background: rgba(30, 30, 30, 0.8);
        backdrop-filter: blur(10px);
        padding: 3rem;
        border-radius: 12px;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4);
        width: 90%;
        max-width: 500px;
        border: 1px solid rgba(255, 255, 255, 0.1);
        position: relative;
    }
    
    .form-header {
        text-align: center;
        margin-bottom: 2rem;
    }
    
    .logo-container {
        margin-bottom: 1.5rem;
        position: relative;
    }
    
    .ghost-icon {
        font-size: 3rem;
        color: #FFD700;
        margin-bottom: 1rem;
        animation: float 3s ease-in-out infinite;
    }
    
    /* Flying Sam image styling */
    #image-box {
        position: absolute;
        width: 300px;
        height: 200px;
        transition: transform 0.5s ease-in-out;
        background: rgba(255, 255, 255, 0.1);
        pointer-events: none;
        z-index: 1000;
    }
    
    #sam-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        display: block;
        opacity: 1;
        visibility: visible;
    }
    
    @keyframes float {
        0%, 100% { transform: translateY(0); }
        50% { transform: translateY(-10px); }
    }
    
    .password-form h1 {
        color: white;
        font-size: 2rem;
        margin: 0;
    }
    
    .password-instruction {
        color: rgba(255, 255, 255, 0.7);
        margin: 0;
    }
    
    .input-group {
        display: flex;
        margin-bottom: 1rem;
    }
    
    #password-input {
        flex: 1;
        padding: 1rem;
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-right: none;
        border-top-left-radius: 6px;
        border-bottom-left-radius: 6px;
        color: white;
        font-size: 1rem;
        transition: all 0.3s;
    }
    
    #password-input:focus {
        outline: none;
        background: rgba(255, 255, 255, 0.15);
    }
    
    #submit-password {
        padding: 1rem 1.5rem;
        background: #FFD700;
        border: none;
        border-top-right-radius: 6px;
        border-bottom-right-radius: 6px;
        color: #121212;
        cursor: pointer;
        transition: background 0.3s;
    }
    
    #submit-password:hover {
        background: #e6c200;
    }
    
    .feedback-message {
        height: 20px;
        text-align: center;
        font-size: 0.9rem;
    }
    
    .feedback-message.error {
        color: #ff6b6b;
    }
    
    .feedback-message.success {
        color: #51cf66;
    }
    
    .shake {
        animation: shake 0.5s cubic-bezier(.36,.07,.19,.97) both;
    }
    
    @keyframes shake {
        10%, 90% { transform: translate3d(-1px, 0, 0); }
        20%, 80% { transform: translate3d(2px, 0, 0); }
        30%, 50%, 70% { transform: translate3d(-4px, 0, 0); }
        40%, 60% { transform: translate3d(4px, 0, 0); }
    }
    
    .hidden {
        display: none;
    }

    /* Main Content Styles */
    main {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
        color: white;
        display: flex;
        flex-direction: column;
        min-height: 85vh;
    }
    
    /* Glitch Text Effect */
    .glitch-container {
        text-align: center;
        margin-bottom: 1rem;
    }
    
    .glitch-text {
        font-size: 3.5rem;
        font-weight: 800;
        position: relative;
        color: white;
        margin: 0 0 1rem;
        text-shadow: 0.05em 0 0 rgba(255,0,0,.75),
                     -0.05em -0.025em 0 rgba(0,255,0,.75),
                     0.025em 0.05em 0 rgba(0,0,255,.75);
        animation: glitch 2.5s infinite;
    }
    
    .glitch-text::before,
    .glitch-text::after {
        content: attr(data-text);
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
    
    .glitch-text::before {
        animation: glitch-effect 3s infinite;
        clip-path: polygon(0 0, 100% 0, 100% 35%, 0 35%);
        text-shadow: -0.05em -0.025em 0 rgba(255,0,0,.75);
    }
    
    .glitch-text::after {
        animation: glitch-effect 2s infinite;
        clip-path: polygon(0 65%, 100% 65%, 100% 100%, 0 100%);
        text-shadow: 0.05em 0.05em 0 rgba(0,255,0,.75);
    }
    
    @keyframes glitch {
        0% {
            text-shadow: 0.05em 0 0 rgba(255,0,0,.75),
                         -0.05em -0.025em 0 rgba(0,255,0,.75),
                         0.025em 0.05em 0 rgba(0,0,255,.75);
        }
        14% {
            text-shadow: 0.05em 0 0 rgba(255,0,0,.75),
                         -0.05em -0.025em 0 rgba(0,255,0,.75),
                         0.025em 0.05em 0 rgba(0,0,255,.75);
        }
        15% {
            text-shadow: -0.05em -0.025em 0 rgba(255,0,0,.75),
                         0.025em 0.025em 0 rgba(0,255,0,.75),
                         -0.05em -0.05em 0 rgba(0,0,255,.75);
        }
        49% {
            text-shadow: -0.05em -0.025em 0 rgba(255,0,0,.75),
                         0.025em 0.025em 0 rgba(0,255,0,.75),
                         -0.05em -0.05em 0 rgba(0,0,255,.75);
        }
        50% {
            text-shadow: 0.025em 0.05em 0 rgba(255,0,0,.75),
                         0.05em 0 0 rgba(0,255,0,.75),
                         0 -0.05em 0 rgba(0,0,255,.75);
        }
        99% {
            text-shadow: 0.025em 0.05em 0 rgba(255,0,0,.75),
                         0.05em 0 0 rgba(0,255,0,.75),
                         0 -0.05em 0 rgba(0,0,255,.75);
        }
        100% {
            text-shadow: -0.025em 0 0 rgba(255,0,0,.75),
                         -0.025em -0.025em 0 rgba(0,255,0,.75),
                         -0.025em -0.05em 0 rgba(0,0,255,.75);
        }
    }
    
    @keyframes glitch-effect {
        0% {
            left: -0.05em;
        }
        20% {
            left: 0.05em;
        }
        40% {
            left: -0.05em;
        }
        60% {
            left: 0.05em;
        }
        80% {
            left: -0.05em;
        }
        100% {
            left: 0.05em;
        }
    }
    
    /* Tagline */
    .tagline {
        text-align: center;
        margin-bottom: 3rem;
    }
    
    .tagline p {
        font-size: 1.5rem;
        color: rgba(255, 255, 255, 0.8);
        margin: 0;
        font-style: italic;
    }
    
    /* Grid Layout */
    .grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 2rem;
        margin-bottom: 3rem;
        flex: 1;
    }
    
    /* Card Styles */
    .card {
        background: rgba(255, 255, 255, 0.05);
        color: white;
        padding: 0;
        border-radius: 10px;
        text-decoration: none;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        position: relative;
        overflow: hidden;
        height: 100%;
        display: block;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
        border: 1px solid rgba(255, 255, 255, 0.1);
        transform-style: preserve-3d;
        transform: perspective(1000px);
    }
    
    .card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 5px;
        background: linear-gradient(90deg, #FFD700, #FFA500);
        z-index: 2;
    }
    
    .card-content {
        padding: 2.5rem 1.5rem;
        text-align: center;
        position: relative;
        z-index: 1;
    }
    
    .card-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: radial-gradient(
            circle at center,
            rgba(255, 215, 0, 0.1) 0%,
            rgba(18, 18, 18, 0) 70%
        );
        opacity: 0;
        transition: opacity 0.5s;
        z-index: 0;
    }
    
    .card:hover .card-overlay {
        opacity: 1;
    }
    
    .card-icon {
        font-size: 3rem;
        color: #FFD700;
        margin-bottom: 1.5rem;
    }
    
    .card h2 {
        color: #FFD700;
        margin: 0 0 1rem;
        font-size: 1.5rem;
    }
    
    .card p {
        margin: 0;
        opacity: 0.8;
        font-size: 1rem;
    }
    
    /* Ghost Card Special Styling */
    .ghost-card {
        background: rgba(20, 20, 20, 0.8);
        box-shadow: 0 10px 30px rgba(255, 215, 0, 0.1);
        border: 1px solid rgba(255, 215, 0, 0.2);
        position: relative;
    }
    
    .ghost-card::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: url('/living-with-the-ghost-of-sam/images/spectral-texture.png');
        background-size: cover;
        opacity: 0.05;
        mix-blend-mode: overlay;
        pointer-events: none;
    }
    
    .ghost-card .card-content {
        position: relative;
    }
    
    .ghost-card h2 {
        text-shadow: 0 0 10px rgba(255, 215, 0, 0.5);
    }
    
    .pulse {
        animation: pulse 2s infinite;
    }
    
    @keyframes pulse {
        0% {
            transform: scale(1);
            opacity: 1;
        }
        50% {
            transform: scale(1.05);
            opacity: 0.8;
        }
        100% {
            transform: scale(1);
            opacity: 1;
        }
    }
    
    .badge {
        position: absolute;
        bottom: 1rem;
        right: 1rem;
        background: rgba(255, 215, 0, 0.2);
        color: #FFD700;
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: bold;
        animation: fadeInOut 3s infinite;
    }
    
    @keyframes fadeInOut {
        0%, 100% { opacity: 0.2; }
        50% { opacity: 1; }
    }
    
    /* Footer Note */
    .footer-note {
        text-align: center;
        margin-top: auto;
        padding-top: 2rem;
    }
    
    .footer-note p {
        font-style: italic;
        color: rgba(255, 255, 255, 0.6);
        font-size: 1.2rem;
        position: relative;
        display: inline-block;
    }
    
    .footer-note p::before,
    .footer-note p::after {
        content: '"';
        color: #FFD700;
        font-size: 1.5rem;
    }
    
    /* Media Queries */
    @media (max-width: 900px) {
        .glitch-text {
            font-size: 2.5rem;
        }
        
        .tagline p {
            font-size: 1.2rem;
        }
        
        .password-form {
            padding: 2rem;
        }
        
        .flying-sam {
            top: -80px;
            left: -50px;
        }
        
        .flying-sam img {
            width: 80px;
        }
    }
    
    @media (max-width: 600px) {
        .glitch-text {
            font-size: 2rem;
        }
        
        .grid {
            grid-template-columns: 1fr;
        }
        
        .footer-note p {
            font-size: 1rem;
        }
        
        .password-form {
            padding: 1.5rem;
            width: 95%;
        }
        
        .password-form h1 {
            font-size: 1.5rem;
        }
        
        .flying-sam {
            top: -60px;
            left: -30px;
        }
        
        .flying-sam img {
            width: 60px;
        }
        
        @keyframes fly {
            0% {
                transform: translate(0, 0) rotate(10deg);
            }
            25% {
                transform: translate(200px, 30px) rotate(-5deg);
            }
            50% {
                transform: translate(80px, 100px) rotate(15deg);
            }
            75% {
                transform: translate(250px, 20px) rotate(-10deg);
            }
            100% {
                transform: translate(0, 0) rotate(10deg);
            }
        }
    }
</style>
