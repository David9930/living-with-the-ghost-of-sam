---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Show Documents">
	<main>
		<h1>Show Documents</h1>
		<p class="instruction">CLICK TO CATCH A BOX BEFORE IT ESCAPES!</p>
		
		<div class="floating-container">
			<div class="doc-card" id="synopsis-card">
				<div class="card-content">
					<h2>Show Synopsis</h2>
					<p>Complete show overview and concept</p>
					<a href="/roles/synopsis" class="view-btn">View Document</a>
				</div>
			</div>
			
			<div class="doc-card" id="season-arc-card">
				<div class="card-content">
					<h2>Show Arc and Episode Highlights</h2>
					<p>First season story arc and episode breakdown</p>
					<a href="/roles/SeasonArcSummary" class="view-btn">View Document</a>
				</div>
			</div>
		</div>
	</main>
</Layout>

<style>
	main {
		margin: auto;
		padding: 2rem;
		max-width: 1200px;
		color: white;
		height: 80vh;
		position: relative;
		overflow: hidden;
	}
	
	h1 {
		font-size: 2.5rem;
		text-align: center;
		margin-bottom: 1rem;
		text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
	}
	
	.instruction {
		text-align: center;
		font-size: 1.2rem;
		margin-bottom: 2rem;
		color: #FFD700;
		font-style: italic;
		animation: pulse 1.5s infinite alternate;
	}
	
	@keyframes pulse {
		0% { opacity: 0.7; }
		100% { opacity: 1; text-shadow: 0 0 10px rgba(255, 215, 0, 0.7); }
	}
	
	.floating-container {
		position: relative;
		width: 100%;
		height: 100%;
	}
	
	.doc-card {
		position: absolute;
		width: 300px;
		background: rgba(0, 0, 0, 0.7);
		padding: 1.5rem;
		border-radius: 12px;
		cursor: pointer;
		box-shadow: 0 0 25px rgba(33, 150, 243, 0.4);
		border: 1px solid rgba(255, 255, 255, 0.1);
		transition: transform 0.3s, box-shadow 0.3s;
		animation-duration: 12s; /* Much faster animation */
		animation-iteration-count: infinite;
		animation-timing-function: ease-in-out;
		animation-direction: alternate;
		user-select: none;
	}
	
	#synopsis-card {
		animation-name: float-1;
		left: 20%;
		top: 10%;
	}
	
	#season-arc-card {
		animation-name: float-2;
		right: 20%;
		top: 30%;
	}
	
	.doc-card.paused {
		animation-play-state: paused;
		box-shadow: 0 0 30px rgba(255, 215, 0, 0.8), 0 0 60px rgba(255, 215, 0, 0.4);
		transform: scale(1.1);
		z-index: 10;
		background: rgba(20, 20, 20, 0.9);
		border: 2px solid rgba(255, 215, 0, 0.5);
	}
	
	.card-content {
		height: 100%;
		display: flex;
		flex-direction: column;
	}
	
	.doc-card h2 {
		font-size: 1.5rem;
		margin-bottom: 1rem;
		color: #FFD700;
	}
	
	.doc-card p {
		flex-grow: 1;
		margin-bottom: 1.5rem;
	}
	
	.view-btn {
		display: inline-block;
		background: linear-gradient(135deg, #2196F3, #0D47A1);
		color: white;
		padding: 0.8rem 1.2rem;
		border-radius: 4px;
		text-decoration: none;
		text-align: center;
		transition: all 0.3s;
		font-weight: bold;
		position: relative;
		overflow: hidden;
		box-shadow: 0 0 10px rgba(33, 150, 243, 0.5);
		text-transform: uppercase;
		letter-spacing: 1px;
	}
	
	.view-btn:hover {
		background: linear-gradient(135deg, #1E88E5, #0D47A1);
		transform: translateY(-2px) scale(1.05);
		box-shadow: 0 0 15px rgba(33, 150, 243, 0.8);
	}
	
	.doc-card.paused .view-btn {
		background: linear-gradient(135deg, #FFD700, #FF8C00);
		box-shadow: 0 0 15px rgba(255, 215, 0, 0.7);
		animation: pulse-button 1.5s infinite;
	}
	
	.doc-card.paused .view-btn:hover {
		background: linear-gradient(135deg, #FFC107, #FF8C00);
		transform: translateY(-3px) scale(1.08);
		box-shadow: 0 0 20px rgba(255, 215, 0, 0.9);
	}
	
	@keyframes pulse-button {
		0% { box-shadow: 0 0 10px rgba(255, 215, 0, 0.7); }
		50% { box-shadow: 0 0 20px rgba(255, 215, 0, 0.9); }
		100% { box-shadow: 0 0 10px rgba(255, 215, 0, 0.7); }
	}
	
	.view-btn::after {
		content: '';
		position: absolute;
		top: -50%;
		left: -50%;
		width: 200%;
		height: 200%;
		background: rgba(255, 255, 255, 0.2);
		transform: rotate(45deg);
		transition: transform 0.6s;
	}
	
	.view-btn:hover::after {
		transform: rotate(45deg) translate(50%, 50%);
	}
	
	@keyframes float-1 {
		0% { transform: translate(0, 0) rotate(0deg); }
		15% { transform: translate(150px, 80px) rotate(8deg); }
		30% { transform: translate(250px, -60px) rotate(-10deg); }
		45% { transform: translate(100px, 150px) rotate(12deg); }
		60% { transform: translate(-100px, 80px) rotate(-8deg); }
		75% { transform: translate(-180px, -100px) rotate(10deg); }
		90% { transform: translate(-80px, -150px) rotate(-12deg); }
		100% { transform: translate(0, 0) rotate(0deg); }
	}
	
	@keyframes float-2 {
		0% { transform: translate(0, 0) rotate(0deg); }
		15% { transform: translate(-150px, 60px) rotate(-8deg); }
		30% { transform: translate(-220px, -80px) rotate(10deg); }
		45% { transform: translate(-100px, 120px) rotate(-12deg); }
		60% { transform: translate(150px, 30px) rotate(8deg); }
		75% { transform: translate(200px, -120px) rotate(-10deg); }
		90% { transform: translate(100px, -150px) rotate(12deg); }
		100% { transform: translate(0, 0) rotate(0deg); }
	}
	
	@media (max-width: 768px) {
		.doc-card {
			width: 250px;
		}
	}
	
	@media (max-width: 480px) {
		.floating-container {
			height: 600px;
		}
		
		.doc-card {
			position: relative;
			margin: 2rem auto;
			animation: none !important;
			width: 100%;
			max-width: 300px;
			left: auto !important;
			right: auto !important;
			top: auto !important;
		}
		
		#synopsis-card, #season-arc-card {
			display: block;
		}
	}
</style>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const cards = document.querySelectorAll('.doc-card');
		const instruction = document.querySelector('.instruction');
		
		// Add a success message function
		const showSuccessMessage = (message) => {
			// Update instruction text
			instruction.textContent = message;
			instruction.style.color = "#00FF00";
			instruction.style.fontSize = "1.4rem";
			
			// Reset after 3 seconds
			setTimeout(() => {
				instruction.textContent = "CLICK TO CATCH A BOX BEFORE IT ESCAPES!";
				instruction.style.color = "#FFD700";
				instruction.style.fontSize = "1.2rem";
			}, 3000);
		};
		
		cards.forEach(card => {
			// Play a capture sound when clicked
			const playCapture = () => {
				const audio = new Audio();
				audio.volume = 0.5;
				try {
					// Use a simple beep sound since we can't reference external files
					const context = new (window.AudioContext || window.webkitAudioContext)();
					const oscillator = context.createOscillator();
					const gainNode = context.createGain();
					
					oscillator.connect(gainNode);
					gainNode.connect(context.destination);
					
					oscillator.type = 'sine';
					oscillator.frequency.value = 800;
					gainNode.gain.exponentialRampToValueAtTime(0.001, context.currentTime + 0.5);
					
					oscillator.start(context.currentTime);
					oscillator.stop(context.currentTime + 0.5);
				} catch (e) {
					console.log("Audio not supported");
				}
			};
			
			// Toggle paused state when clicking the card
			card.addEventListener('click', (e) => {
				// Only toggle if the click is on the card itself, not on the button
				if (!e.target.classList.contains('view-btn')) {
					if (!card.classList.contains('paused')) {
						playCapture();
						showSuccessMessage("CAUGHT! NOW CLICK VIEW DOCUMENT!");
					}
					
					card.classList.toggle('paused');
					
					// If this card is now paused, make sure it's on top
					if (card.classList.contains('paused')) {
						// Lower z-index of all cards
						cards.forEach(c => {
							c.style.zIndex = "1";
						});
						// Raise z-index of this card
						card.style.zIndex = "10";
					}
				}
			});
			
			// Prevent the anchor click from propagating to the card
			const anchor = card.querySelector('.view-btn');
			anchor.addEventListener('click', (e) => {
				// Only navigate if the card is paused
				if (!card.classList.contains('paused')) {
					e.preventDefault();
					card.classList.add('paused');
					playCapture();
					showSuccessMessage("CAUGHT! NOW CLICK VIEW DOCUMENT!");
				}
			});
		});
	});
</script>
