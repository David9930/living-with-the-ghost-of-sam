---
// Import the Navigation component
import Navigation from '../components/Navigation.astro';
interface Props {
    title: string;
    showNavigation?: boolean;
}
const { title, showNavigation = true } = Astro.props;
const base = import.meta.env.BASE_URL;
---
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="description" content="Living with the Ghost of Sam">
        <meta name="viewport" content="width=device-width" />
        <link rel="icon" type="image/svg+xml" href={`${base}favicon.svg`} />
        <meta name="generator" content={Astro.generator} />
        <title>{title} | Living with the Ghost of Sam</title>
        
        <!-- EmailJS with improved initialization, debugging and validation -->
        <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/@emailjs/browser@3/dist/email.min.js"></script>
        <script type="text/javascript">
            (function() {
                // Flag to track EmailJS initialization status
                window.emailjsInitialized = false;
                
                // Debug logging
                console.log("Starting EmailJS initialization process...");
                
                // Function to initialize EmailJS with retry logic
                function initializeEmailJS(retryCount = 0) {
                    console.log(`Attempting to initialize EmailJS (attempt ${retryCount + 1})...`);
                    
                    try {
                        if (typeof emailjs !== 'undefined') {
                            // Initialize with public key
                            emailjs.init("9RBvHdx1jHS-zVWcA");
                            
                            // Set global flag for other scripts to check
                            window.emailjsInitialized = true;
                            
                            // Verify initialization worked by checking a method
                            if (typeof emailjs.send === 'function') {
                                console.log("EmailJS initialized successfully and verified");
                                
                                // Check if we've already sent the test ping in this session
                                if (!sessionStorage.getItem('emailjs_test_sent')) {
                                    // Send a test ping to ensure everything is working, but only once per session
                                    setTimeout(function() {
                                        console.log("Sending EmailJS test ping...");
                                        emailjs.send(
                                            'service_mglwuwe',
                                            'template_6cjvb36',
                                            {
                                                to_email: 'dburnham9930@gmail.com',
                                                from_name: 'System Initialization',
                                                from_email: 'system@livingwiththeghost.com',
                                                subject: 'EmailJS Initialization Test',
                                                message: 'EmailJS has been successfully initialized and can send messages. This is an automated message from the website system initialization process.',
                                                email: 'system@livingwiththeghost.com', // For template compatibility
                                                category: 'System Initialization',
                                                page: window.location.pathname
                                            }
                                        ).then(
                                            function() { 
                                                console.log("Test ping sent successfully");
                                                // Mark that we've sent the test ping for this session
                                                sessionStorage.setItem('emailjs_test_sent', 'true');
                                            },
                                            function(error) { console.error("Test ping failed:", error); }
                                        );
                                    }, 2000); // Wait 2 seconds to make sure everything is loaded
                                } else {
                                    console.log("EmailJS test ping already sent in this session, skipping");
                                }
                            } else {
                                console.error("EmailJS initialized but send method not found");
                                retryInitialization(retryCount);
                            }
                        } else {
                            retryInitialization(retryCount);
                        }
                    } catch (error) {
                        console.error("Error initializing EmailJS:", error);
                        retryInitialization(retryCount);
                    }
                }
                
                // Helper function for retry logic
                function retryInitialization(retryCount) {
                    if (retryCount < 3) {
                        // Retry up to 3 times with increasing delay
                        console.warn(`EmailJS initialization failed, will retry (attempt ${retryCount + 1}/3)`);
                        setTimeout(() => initializeEmailJS(retryCount + 1), 1000 * (retryCount + 1));
                    } else {
                        console.error("Failed to initialize EmailJS after multiple attempts");
                    }
                }
                
                // Start initialization when DOM is loaded
                if (document.readyState === 'loading') {
                    document.addEventListener('DOMContentLoaded', function() {
                        initializeEmailJS();
                    });
                } else {
                    // DOM already loaded, initialize immediately
                    initializeEmailJS();
                }
            })();
        </script>
    </head>
    <body>
        {showNavigation && <Navigation />}
        <main>
            <slot />
        </main>
        
        <!-- Page tracking script - Use local path instead of absolute URL -->
        <script is:inline>
            // Check if tracking.js is already loaded
            if (!window.trackingLoaded) {
                console.log("Loading tracking.js script...");
                
                const script = document.createElement('script');
                script.src = `${import.meta.env.BASE_URL}/js/tracking.js`;
                script.onerror = function() {
                    console.error("Failed to load tracking.js from base URL path");
                    
                    // Fallback to the absolute URL if local path fails
                    const fallbackScript = document.createElement('script');
                    fallbackScript.src = "https://david9930.github.io/living-with-the-ghost-of-sam/js/tracking.js";
                    fallbackScript.onerror = function() {
                        console.error("Failed to load tracking.js from fallback URL");
                    };
                    document.body.appendChild(fallbackScript);
                };
                document.body.appendChild(script);
                
                // Set flag to prevent double loading
                window.trackingLoaded = true;
            }
        </script>
    </body>
</html>

<style is:global>
    :root {
        --accent: 136, 58, 234;
        --accent-light: 224, 204, 250;
        --accent-dark: 49, 10, 101;
        --accent-gradient: linear-gradient(45deg, rgb(var(--accent)), rgb(var(--accent-light)) 30%, white 60%);
    }
    
    html {
        font-family: system-ui, sans-serif;
        background: #13151A;
        background-size: 224px;
        color-scheme: dark;
    }
    
    body {
        margin: 0;
        padding: 0;
        min-height: 100vh;
    }
    
    main {
        padding-top: 70px; /* Add padding to account for fixed navigation */
    }
    
    @media (max-width: 768px) {
        main {
            padding-top: 0; /* Remove padding for mobile as nav is not fixed */
        }
    }
    
    code {
        font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
            Bitstream Vera Sans Mono, Courier New, monospace;
    }
</style>
